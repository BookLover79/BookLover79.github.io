<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《通用源码阅读指导书》</title>
      <link href="/2024/12/18/%E6%8A%80%E6%9C%AF%E4%B9%A6_%E9%80%9A%E7%94%A8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%8C%87%E5%AF%BC%E4%B9%A6/"/>
      <url>/2024/12/18/%E6%8A%80%E6%9C%AF%E4%B9%A6_%E9%80%9A%E7%94%A8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%8C%87%E5%AF%BC%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一本指导源码阅读的书，万变不理其宗，学习源码的阅读方式。</p><p>大二跟着sakura写STL源码，当时不懂其深意，写的坑坑洼洼，但是什么时候开始都不算晚，只要永远在路上！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码阅读 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于对比学习的自监督降水预报检验框架_实验</title>
      <link href="/2024/12/12/%E8%AE%BA%E6%96%87_%E5%9F%BA%E4%BA%8E%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E7%9B%91%E7%9D%A3%E9%99%8D%E6%B0%B4%E9%A2%84%E6%8A%A5%E6%A3%80%E9%AA%8C%E6%A1%86%E6%9E%B6_%E5%AE%9E%E9%AA%8C/"/>
      <url>/2024/12/12/%E8%AE%BA%E6%96%87_%E5%9F%BA%E4%BA%8E%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E7%9B%91%E7%9D%A3%E9%99%8D%E6%B0%B4%E9%A2%84%E6%8A%A5%E6%A3%80%E9%AA%8C%E6%A1%86%E6%9E%B6_%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f7fdefd7c2d46715d48eab2f65db2788794afc15187291862f0dd87e8481e2e7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你猜，你好好猜</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
            <tag> 思路整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大模型学习路线</title>
      <link href="/2024/12/07/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF_%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2024/12/07/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF_%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><h2 id="1-jjw"><a href="#1-jjw" class="headerlink" title="1. jjw"></a>1. jjw</h2><p><a href="https://www.hiascend.com/edu/courses">全部课程</a></p><ol><li><a href="https://www.hiascend.com/zh/developer/courses/detail/2203141624362937328">推荐课程1：PyTorch模型迁移与调优专题</a></li><li><a href="https://www.hiascend.com/zh/developer/courses/detail/1714534129244676098">推荐课程2：MindSpore LLM大模型原理和实践：Transformer</a></li><li><a href="https://www.hiascend.com/zh/developer/courses/detail/1676866050056585217">推荐课程3：ATC模型转换</a></li><li><a href="https://www.hiascend.com/zh/developer/courses/detail/1788118090409144321">推荐课程4：昇腾大模型训练调试调优</a></li></ol><h2 id="2-b站"><a href="#2-b站" class="headerlink" title="2. b站"></a>2. b站</h2><ol><li><a href="https://www.bilibili.com/video/BV1XS411w7qr/?spm_id_from=333.337.search-card.all.click&vd_source=2c3e1c3086544e2bbc96712d9fb90632">【李宏毅】2024年公认最好的【LLM大模型】教程！大模型入门到进阶，一套全解决！2024生成式人工智慧</a></li><li><a href="https://www.bilibili.com/video/BV1YBUNYAECh/?spm_id_from=333.337.search-card.all.click&vd_source=2c3e1c3086544e2bbc96712d9fb90632">(超爽中英!) 2024公认最全的【吴恩达大模型LLM】系列教程！附代码_LangChain_微调ChatGPT提示词_RAG模型应用_agent_生成式AI</a></li></ol><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="1-吃果冻不吐果冻皮"><a href="#1-吃果冻不吐果冻皮" class="headerlink" title="1. 吃果冻不吐果冻皮"></a>1. 吃果冻不吐果冻皮</h2><p>本项目旨在分享大模型相关技术原理以及实战经验（大模型工程化、大模型应用落地） <a href="https://github.com/liguodongiot/llm-action">链接</a></p><h2 id="2-Datawhalechina"><a href="#2-Datawhalechina" class="headerlink" title="2. Datawhalechina"></a>2. <a href="https://github.com/orgs/datawhalechina/repositories?type=all&q=sort:stars">Datawhalechina</a></h2><ol><li><p>面向开发者的 LLM 入门教程，吴恩达大模型系列课程中文版 <a href="https://github.com/datawhalechina/llm-cookbook">链接</a></p></li><li><p>《开源大模型食用指南》：基于Linux环境快速部署开源大模型，一文了解大模型基础知识 <a href="https://github.com/datawhalechina/so-large-lm">链接</a></p></li><li><p>llm-universe：面向小白开发者的大模型应用开发教程 <a href="https://datawhalechina.github.io/llm-universe/">链接</a></p></li><li><p>动手学LLM，从0逐步构建GLM4\Llama3\RWKV6， 深入理解大模型原理  <a href="https://github.com/datawhalechina/llms-from-scratch-cn">链接</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/06/%E5%B7%A5%E5%85%B7_hello-world/"/>
      <url>/2024/12/06/%E5%B7%A5%E5%85%B7_hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g = hexo generate  <span class="comment"># 创建静态页面</span></span><br><span class="line">$ hexo s = hexo server  <span class="comment"># 本地部署</span></span><br></pre></td></tr></table></figure><h3 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g = hexo generate </span><br><span class="line">$ hexo d = hexo deploy</span><br></pre></td></tr></table></figure><h2 id="分类和标签-Categories-Tags"><a href="#分类和标签-Categories-Tags" class="headerlink" title="分类和标签 Categories &amp; Tags"></a>分类和标签 Categories &amp; Tags</h2><ul><li>分类：结构化、层次感强，用来划分大的内容模块。分类不宜过多，也不要太乱，一般来说，10个左右的大分类比较合适，最好一眼就能看懂。每个大分类可以有几层子分类，这样也更有条理。</li><li>标签：灵活，用来描述文章的细节和具体内容，通常用来补充分类无法覆盖到的多维度信息。标签没有数量限制，可以根据每篇文章的内容灵活添加。类似于关键词</li></ul><table><thead><tr><th align="center">一级分类</th><th align="center">slug</th><th align="center">内容描述</th></tr></thead><tbody><tr><td align="center">编程技术</td><td align="center">programming</td><td align="center">前端开发、后端开发、移动开发、数据库和编程语言的技术知识。</td></tr><tr><td align="center">效率工具</td><td align="center">productivity</td><td align="center">办公工具、开发工具、自动化脚本、时间管理等，提高工作效率的实用工具和方法。</td></tr><tr><td align="center">资源干货</td><td align="center">resources</td><td align="center">开源框架、开源库、开源项目和插件的使用及推荐。</td></tr><tr><td align="center">产品经理</td><td align="center">productmanager</td><td align="center">产品规划、需求管理、项目管理、数据驱动，以及市场与运营相关的管理知识，帮助产品经理优化产品流程和策略。</td></tr><tr><td align="center">人工智能</td><td align="center">ai</td><td align="center">涵盖机器学习、自然语言处理 (NLP)、知识图谱等技术，探讨人工智能领域的前沿技术和应用案例。</td></tr><tr><td align="center">数据科学</td><td align="center">datascience</td><td align="center">数据挖掘、数据分析与建模等与数据处理相关的技术和方法。</td></tr><tr><td align="center">实践作品</td><td align="center">projects</td><td align="center">个人项目日志、代码实践以及各种实战作品展示。</td></tr><tr><td align="center">建站记录</td><td align="center">webdevelopment</td><td align="center">网站搭建、前端优化、SEO优化和服务器配置的完整记录。</td></tr><tr><td align="center">日志随笔</td><td align="center">journal</td><td align="center">涵盖旅行与探索、阅读与思考、个人成长、兴趣爱好等生活感悟和随笔，分享个人生活与成长经验。</td></tr></tbody></table><h2 id="文章头部"><a href="#文章头部" class="headerlink" title="文章头部"></a>文章头部</h2><ul><li><p>title: Title</p></li><li><p>date: YYYY-MM-DD HH:MM:SS</p></li><li><p>categories: category</p></li><li><p>tags: [tag1, tag2, …]</p></li><li><p>加密码：</p><ul><li><p>password: xxx</p></li><li><p>abstract: 你可以看到我吗</p></li><li><p>message: who am i</p></li></ul></li></ul><h2 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h2><p><a href="https://github.com/jaredly/hexo-admin">https://github.com/jaredly/hexo-admin</a></p><h2 id="博客风格（排名前10）"><a href="#博客风格（排名前10）" class="headerlink" title="博客风格（排名前10）"></a>博客风格（排名前10）</h2><p><a href="https://github.com/Ailln/awesome-hexo-theme?tab=readme-ov-file">https://github.com/Ailln/awesome-hexo-theme?tab=readme-ov-file</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><h3 id="多卷压缩文件"><a href="#多卷压缩文件" class="headerlink" title="多卷压缩文件"></a>多卷压缩文件</h3><p>给定四个文件</p><ul><li><code>04.zip.001</code>（第一个分割文件）</li><li><code>04.zip.002</code>（第二个分割文件）</li><li><code>04.zip.003</code>（第三个分割文件）</li><li><code>04.zip.004</code>（第四个分割文件）</li></ul><p>解压步骤：</p><ol><li><p>确保所有的分割文件都在同一个文件夹中。</p></li><li><p>使用<code>7z x 04.zip.001</code>，7-Zip将自动识别这是一个多卷压缩文件</p></li></ol><h2 id="GPT提示词"><a href="#GPT提示词" class="headerlink" title="GPT提示词"></a>GPT提示词</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>指出下面英文存在的问题，使其更加符合英文论文规范（要求：没有错的语句和词语尽量保留原文）</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>润色下文，使其更加通顺、学术，符合论文规范（要求：没有错的语句和词语尽量保留原文）</p><p>精简下文，使其保持原意的情况下，更加通顺、学术，符合论文规范（要求：没有错的语句和词语尽量保留原文）</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode Hot100(简单中等题)</title>
      <link href="/2024/12/06/%E7%AE%97%E6%B3%95%E9%A2%98_Leetcode-Hot-100-%E7%AE%80%E5%8D%95%E4%B8%AD%E7%AD%89%E9%A2%98/"/>
      <url>/2024/12/06/%E7%AE%97%E6%B3%95%E9%A2%98_Leetcode-Hot-100-%E7%AE%80%E5%8D%95%E4%B8%AD%E7%AD%89%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-Hot-100-简单中等题"><a href="#Leetcode-Hot-100-简单中等题" class="headerlink" title="Leetcode Hot 100(简单中等题)"></a>Leetcode Hot 100(简单中等题)</h1><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总结:</span></span><br><span class="line"><span class="comment"># 1. 输出下标，需要i循环</span></span><br><span class="line"><span class="comment"># 2. 判断第二个元素是否存在：从i+1开始</span></span><br><span class="line"><span class="comment"># 3. 找第二个元素的dix：从i+1开始</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            f = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> f <span class="keyword">in</span> nums[i + <span class="number">1</span>:]:  <span class="comment"># 注意i + 1</span></span><br><span class="line">                <span class="keyword">return</span> ([i, nums.index(f, i + <span class="number">1</span>)])  <span class="comment"># 这里也是i + 1</span></span><br></pre></td></tr></table></figure><h3 id="2-字母异位词分组"><a href="#2-字母异位词分组" class="headerlink" title="2. 字母异位词分组"></a>2. 字母异位词分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总结：</span></span><br><span class="line"><span class="comment"># 对字母排序，一样的就是异位词</span></span><br><span class="line"><span class="comment"># 用字典，key是排序后结果，value是之前的（优雅），合理的一对多</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">groupAnagrams</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        d = defaultdict(<span class="built_in">list</span>)  <span class="comment"># 是list</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            d[<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(s))].append(s)</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">list</span>(d.values()))  <span class="comment"># 是values</span></span><br></pre></td></tr></table></figure><h3 id="3-最长连续序列"><a href="#3-最长连续序列" class="headerlink" title="3. 最长连续序列"></a>3. 最长连续序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总结：</span></span><br><span class="line"><span class="comment"># 1. 求连续的数据，所以可以先去重，加入set</span></span><br><span class="line"><span class="comment"># 2. 外层求全部长度最大值lth，内层cur求当前的长度</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestConsecutive</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums_set = <span class="built_in">set</span>(nums)  <span class="comment"># 最长连续所以要set，因为直接+1判断是否in，所以不需要sorted</span></span><br><span class="line">        lth = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> nums <span class="keyword">in</span> nums_set:</span><br><span class="line">            <span class="keyword">if</span> nums - <span class="number">1</span> <span class="keyword">in</span> nums_set:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cur_nums = nums</span><br><span class="line">            cur_lth = <span class="number">1</span>  <span class="comment"># 加入第一个</span></span><br><span class="line">            <span class="keyword">while</span> cur_nums + <span class="number">1</span> <span class="keyword">in</span> nums_set:</span><br><span class="line">                cur_lth += <span class="number">1</span></span><br><span class="line">                cur_nums += <span class="number">1</span></span><br><span class="line">            lth = <span class="built_in">max</span>(lth, cur_lth)</span><br><span class="line">        <span class="keyword">return</span> lth</span><br></pre></td></tr></table></figure><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h3 id="4-移动零"><a href="#4-移动零" class="headerlink" title="4. 移动零"></a>4. 移动零</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">moveZeroes</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> nums[right] != <span class="number">0</span>:  <span class="comment"># 把非0的丢前面去</span></span><br><span class="line">                nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><h3 id="5-盛最多水的容器"><a href="#5-盛最多水的容器" class="headerlink" title="5. 盛最多水的容器"></a>5. 盛最多水的容器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(height)</span><br><span class="line">        left, right = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:  <span class="comment"># &lt;=的时候，=的面积为0</span></span><br><span class="line">            area = (right - left) * <span class="built_in">min</span>(height[left], height[right])</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, area)</span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="6-三数之和"><a href="#6-三数之和" class="headerlink" title="6. 三数之和"></a>6. 三数之和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总结</span></span><br><span class="line"><span class="comment"># 1. 首先要对nums 进行排序，有了单调性再指针</span></span><br><span class="line"><span class="comment"># 2. 对于第一个指针，需要循环去重</span></span><br><span class="line"><span class="comment"># 3. 对于判断成功的，需要循环去重</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums = <span class="built_in">sorted</span>(nums)</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i-<span class="number">1</span>]:  <span class="comment"># 循环第一个数，不要和之前的相等</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = n - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:  <span class="comment"># 俩个指针不能相遇</span></span><br><span class="line">                value = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> value == <span class="number">0</span>:</span><br><span class="line">                    ans.append([nums[i], nums[left], nums[right]])</span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:  <span class="comment"># left的右边肯定右right</span></span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:  <span class="comment"># right的左边肯定还有left</span></span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    left += <span class="number">1</span>  <span class="comment"># ！！注意了，添加完，俩个指针都要动</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> value &lt; <span class="number">0</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> (ans)</span><br></pre></td></tr></table></figure><h3 id="7-接雨水"><a href="#7-接雨水" class="headerlink" title="7. 接雨水"></a>7. 接雨水</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总结：</span></span><br><span class="line"><span class="comment"># 2. 用双指针可以边记录边计算</span></span><br><span class="line"><span class="comment"># 1. 记录前后缀，只记录最大值is ok</span></span><br><span class="line">height = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 输出：6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 双指针 1125</span></span><br><span class="line">n = <span class="built_in">len</span>(height)</span><br><span class="line">pre_fix = suf_fix = <span class="number">0</span></span><br><span class="line">left, right = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> left &lt;= right:</span><br><span class="line">    pre_fix = <span class="built_in">max</span>(pre_fix, height[left])</span><br><span class="line">    suf_fix = <span class="built_in">max</span>(suf_fix, height[right])</span><br><span class="line">    <span class="keyword">if</span> pre_fix &lt; suf_fix:</span><br><span class="line">        ans += pre_fix - height[left]</span><br><span class="line">        left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ans += suf_fix - height[right]</span><br><span class="line">        right -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h3 id="8-无重复字符的最长子串"><a href="#8-无重复字符的最长子串" class="headerlink" title="8. 无重复字符的最长子串"></a>8. 无重复字符的最长子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总结</span></span><br><span class="line"><span class="comment"># 1. 用set判断是否有重复元素</span></span><br><span class="line"><span class="comment"># 2. left和right都从左边开始，left固定+1可以用for循环</span></span><br><span class="line"><span class="comment"># 3. right滑动要注意范围不能超过n</span></span><br><span class="line"><span class="comment"># 4. occ随着窗口变化，最大值单独计算</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        occ = <span class="built_in">set</span>()</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        right = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> left <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> left &gt; <span class="number">0</span>:  <span class="comment"># 只要不是第一个</span></span><br><span class="line">                occ.remove(s[left - <span class="number">1</span>])  <span class="comment"># 滑动窗口右移，删掉左边</span></span><br><span class="line">            <span class="keyword">while</span> right + <span class="number">1</span> &lt; n <span class="keyword">and</span> s[right + <span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> occ:  <span class="comment">#！！这个是while</span></span><br><span class="line">                occ.add(s[right + <span class="number">1</span>])  <span class="comment"># 滑动窗口右移，加入右边</span></span><br><span class="line">                right += <span class="number">1</span>  <span class="comment"># ！！ 只要右while，就要右+=1</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> (ans)</span><br></pre></td></tr></table></figure><h3 id="9-找到字符串中所有字母异位词"><a href="#9-找到字符串中所有字母异位词" class="headerlink" title="9. 找到字符串中所有字母异位词"></a>9. 找到字符串中所有字母异位词</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findAnagrams</span>(<span class="params">self, s: <span class="built_in">str</span>, p: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        len_s, len_p = <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">        count_s, count_p = [<span class="number">0</span>] * <span class="number">26</span>, [<span class="number">0</span>] * <span class="number">26</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">if</span> len_s &lt; len_p:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_p):</span><br><span class="line">            count_s[<span class="built_in">ord</span>(s[i]) - <span class="number">97</span>] += <span class="number">1</span></span><br><span class="line">            count_p[<span class="built_in">ord</span>(p[i]) - <span class="number">97</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count_p == count_s:</span><br><span class="line">            ans.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_s - len_p):</span><br><span class="line">            count_s[<span class="built_in">ord</span>(s[i]) - <span class="number">97</span>] -= <span class="number">1</span></span><br><span class="line">            count_s[<span class="built_in">ord</span>(s[i + len_p]) - <span class="number">97</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count_p == count_s:</span><br><span class="line">                ans.append(i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h2><h3 id="10-和为-K-的子数组"><a href="#10-和为-K-的子数组" class="headerlink" title="10. 和为 K 的子数组"></a>10. 和为 K 的子数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subarraySum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        s = [<span class="number">0</span>] * (<span class="built_in">len</span>(nums) + <span class="number">1</span>)  <span class="comment"># 0也要加进来，帮助运算</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            s[i + <span class="number">1</span>] = s[i] + x <span class="comment"># 前缀和</span></span><br><span class="line"></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        cnt = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        <span class="keyword">for</span> sj <span class="keyword">in</span> s:</span><br><span class="line">            ans += cnt[sj - k]  <span class="comment"># ans必须在前</span></span><br><span class="line">            cnt[sj] += <span class="number">1</span>  <span class="comment"># 因为s多了一个0，如果k是0会多算一个</span></span><br><span class="line">        <span class="keyword">return</span> (ans)</span><br></pre></td></tr></table></figure><h2 id="普通数组"><a href="#普通数组" class="headerlink" title="普通数组"></a>普通数组</h2><h3 id="11-最大子数组和"><a href="#11-最大子数组和" class="headerlink" title="11. 最大子数组和"></a>11. 最大子数组和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        pre = ans = nums[<span class="number">0</span>]  <span class="comment"># pre主要看大于零i小于零</span></span><br><span class="line">                             <span class="comment"># 这里赋了0，所以下面从1开始</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            pre = <span class="built_in">max</span>(nums[i], nums[i] + pre)  <span class="comment"># 因为要求连续，所以pre为负数，直接弃了，当前的nums肯定要取</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, pre)</span><br><span class="line">        <span class="keyword">return</span> (ans)</span><br></pre></td></tr></table></figure><h3 id="12-合并区间"><a href="#12-合并区间" class="headerlink" title="12. 合并区间"></a>12. 合并区间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        intervals.sort(key=<span class="keyword">lambda</span> p: p[<span class="number">0</span>]) <span class="comment"># 对左端点排序</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> intervals:</span><br><span class="line">            <span class="keyword">if</span> ans <span class="keyword">and</span> p[<span class="number">0</span>] &lt;= ans[-<span class="number">1</span>][<span class="number">1</span>]: <span class="comment"># 判断左端点可否合并</span></span><br><span class="line">                                           <span class="comment"># 1. ans表是存在上一个端点</span></span><br><span class="line">                                           <span class="comment"># 2. &lt;=表示可以合并</span></span><br><span class="line">                ans[-<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(ans[-<span class="number">1</span>][<span class="number">1</span>], p[<span class="number">1</span>])   <span class="comment"># 合并更新右端点</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(p)</span><br><span class="line">        <span class="keyword">return</span> (ans)</span><br></pre></td></tr></table></figure><h3 id="13-轮转数组"><a href="#13-轮转数组" class="headerlink" title="13. 轮转数组"></a>13. 轮转数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">i, j</span>):</span><br><span class="line">            <span class="keyword">while</span> i &lt; j:</span><br><span class="line">                nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        k %= n  <span class="comment"># 这个相当重要，不要做无谓的浪费</span></span><br><span class="line">        reverse(<span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">        reverse(<span class="number">0</span>, k - <span class="number">1</span>)</span><br><span class="line">        reverse(k, n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> (nums)</span><br></pre></td></tr></table></figure><h3 id="14-除自身以外数组的乘积"><a href="#14-除自身以外数组的乘积" class="headerlink" title="14. 除自身以外数组的乘积"></a>14. 除自身以外数组的乘积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">productExceptSelf</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        l, r, ans = [<span class="number">0</span>] * n, [<span class="number">0</span>] * n, [<span class="number">0</span>] * n  <span class="comment"># 必须分来初始化！</span></span><br><span class="line">        l[<span class="number">0</span>] = r[-<span class="number">1</span>] = <span class="number">1</span>  <span class="comment"># 初始化乘法从1开始</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n): <span class="comment"># 从1开始</span></span><br><span class="line">            l[i] = l[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>]  <span class="comment"># 后面俩个是一致的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):  <span class="comment"># 到1结束</span></span><br><span class="line">            r[i - <span class="number">1</span>] = r[i] * nums[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  <span class="comment"># 所有都循环</span></span><br><span class="line">            ans[i] = l[i] * r[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (ans)</span><br></pre></td></tr></table></figure><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="15-矩阵置零"><a href="#15-矩阵置零" class="headerlink" title="15. 矩阵置零"></a>15. 矩阵置零</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setZeroes</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        row, col = [<span class="literal">False</span>] * m, [<span class="literal">False</span>] * n  <span class="comment"># 俩个一维的来指引</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> matrix[i][j] == <span class="number">0</span>:</span><br><span class="line">                    row[i] = <span class="literal">True</span></span><br><span class="line">                    col[j] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> row[i] <span class="keyword">or</span> col[j]:</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="16-螺旋矩阵"><a href="#16-螺旋矩阵" class="headerlink" title="16. 螺旋矩阵"></a>16. 螺旋矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spiralOrder</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        l, r, t, b = <span class="number">0</span>, <span class="built_in">len</span>(matrix[<span class="number">0</span>]) - <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">len</span>(matrix) - <span class="number">1</span> <span class="comment"># !!前面是matrix[0]</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l, r + <span class="number">1</span>): res.append(matrix[t][i]) <span class="comment"># 后面的固定值改变</span></span><br><span class="line">            t += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> t &gt; b: <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t, b + <span class="number">1</span>): res.append(matrix[i][r])</span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l &gt; r: <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r, l - <span class="number">1</span>, -<span class="number">1</span>): res.append(matrix[b][i])</span><br><span class="line">            b -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> t &gt; b: <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b, t - <span class="number">1</span>, -<span class="number">1</span>): res.append(matrix[i][l])</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l &gt; r: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="17-旋转图像"><a href="#17-旋转图像" class="headerlink" title="17. 旋转图像"></a>17. 旋转图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n // <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>((n + <span class="number">1</span>) // <span class="number">2</span>):  <span class="comment"># 因为是奇偶数，所以是n+1再除以2</span></span><br><span class="line">                tmp = matrix[i][j]</span><br><span class="line">                matrix[i][j] = matrix[n - <span class="number">1</span> - j][i]</span><br><span class="line">                matrix[n - <span class="number">1</span> - j][i] = matrix[n - <span class="number">1</span> - i][n - <span class="number">1</span> - j]</span><br><span class="line">                matrix[n - <span class="number">1</span>- i][n - <span class="number">1</span> - j] = matrix[j][n - <span class="number">1</span> - i]</span><br><span class="line">                matrix[j][n - <span class="number">1</span> - i] = tmp</span><br></pre></td></tr></table></figure><h3 id="18-搜索二维矩阵-II"><a href="#18-搜索二维矩阵-II" class="headerlink" title="18. 搜索二维矩阵 II"></a>18. 搜索二维矩阵 II</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchMatrix</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">            idx = bisect.bisect_left(row, target)</span><br><span class="line">            <span class="keyword">if</span> idx &lt; <span class="built_in">len</span>(row) <span class="keyword">and</span> row[idx] == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="19-相交链表"><a href="#19-相交链表" class="headerlink" title="19. 相交链表"></a>19. 相交链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getIntersectionNode</span>(<span class="params">self, headA: ListNode, headB: ListNode</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        A, B = headA, headB</span><br><span class="line">        <span class="keyword">while</span> A != B:</span><br><span class="line">            A = A.<span class="built_in">next</span> <span class="keyword">if</span> A <span class="keyword">else</span> headB</span><br><span class="line">            B = B.<span class="built_in">next</span> <span class="keyword">if</span> B <span class="keyword">else</span> headA</span><br><span class="line">        <span class="keyword">return</span> A  <span class="comment"># 如果不相交，走A+B长度就变成null了</span></span><br></pre></td></tr></table></figure><h3 id="20-反转链表"><a href="#20-反转链表" class="headerlink" title="20. 反转链表"></a>20. 反转链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        cur = head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            nxt = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = nxt</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure><h3 id="21-回文链表"><a href="#21-回文链表" class="headerlink" title="21. 回文链表"></a>21. 回文链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">middleNode</span>(<span class="params">self, head:<span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        show = fast = head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line">            show = show.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> show</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head:<span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            nxt = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = nxt</span><br><span class="line">        <span class="keyword">return</span> pre</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        mid = <span class="variable language_">self</span>.middleNode(head)</span><br><span class="line">        head2 = <span class="variable language_">self</span>.reverseList(mid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head2:  <span class="comment"># head2更短，直接跟着他走</span></span><br><span class="line">            <span class="keyword">if</span> head.val != head2.val:  <span class="comment"># 先判断，再走</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">            head2 = head2.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="22-环形链表"><a href="#22-环形链表" class="headerlink" title="22. 环形链表"></a>22. 环形链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hasCycle</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        show = fast = head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line">            show = show.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> show == fast:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="23-环形链表-II"><a href="#23-环形链表-II" class="headerlink" title="23. 环形链表 II"></a>23. 环形链表 II</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detectCycle</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        fast, show = head, head</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (fast <span class="keyword">and</span> fast.<span class="built_in">next</span>): <span class="keyword">return</span> <span class="comment">#存在空的情况，返回空</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            show = show.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> fast == show:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> fast != show:</span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">            show = show.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> fast</span><br></pre></td></tr></table></figure><h3 id="24-合并两个有序链表"><a href="#24-合并两个有序链表" class="headerlink" title="24. 合并两个有序链表"></a>24. 合并两个有序链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, list1: <span class="type">Optional</span>[ListNode], list2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        cur = dum = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">and</span> list2:</span><br><span class="line">            <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">                cur.<span class="built_in">next</span>, list1 = list1, list1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur.<span class="built_in">next</span>, list2 = list2, list2.<span class="built_in">next</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span> <span class="comment">#重点</span></span><br><span class="line">        cur.<span class="built_in">next</span> = list1 <span class="keyword">if</span> list1 <span class="keyword">else</span> list2</span><br><span class="line">        <span class="keyword">return</span> dum.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="25-两数相加"><a href="#25-两数相加" class="headerlink" title="25. 两数相加"></a>25. 两数相加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addTwoNumbers</span>(<span class="params">self, l1: <span class="type">Optional</span>[ListNode], l2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        cur = dum = ListNode(<span class="number">0</span>)</span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                carry += l1.val</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                carry += l2.val</span><br><span class="line">                l2 = l2. <span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = ListNode(carry % <span class="number">10</span>)</span><br><span class="line">            carry //= <span class="number">10</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dum.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="26-删除链表的倒数第-N-个结点"><a href="#26-删除链表的倒数第-N-个结点" class="headerlink" title="26. 删除链表的倒数第 N 个结点"></a>26. 删除链表的倒数第 N 个结点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeNthFromEnd</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], n: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        left = right = dum = ListNode(<span class="built_in">next</span> = head)  <span class="comment"># ！！多一个哨兵</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            right = right.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> right.<span class="built_in">next</span>:  <span class="comment"># 少掉哨兵这个</span></span><br><span class="line">            left = left.<span class="built_in">next</span></span><br><span class="line">            right = right.<span class="built_in">next</span></span><br><span class="line">        left.<span class="built_in">next</span> = left.<span class="built_in">next</span>.<span class="built_in">next</span>  <span class="comment"># 也是要跳过哨兵：修改的next指针，left是node</span></span><br><span class="line">        <span class="keyword">return</span> dum.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="27-两两交换链表中的节点"><a href="#27-两两交换链表中的节点" class="headerlink" title="27. 两两交换链表中的节点"></a>27. 两两交换链表中的节点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        node0 = dum = ListNode(<span class="built_in">next</span>=head)</span><br><span class="line">        node1 = head</span><br><span class="line">        <span class="keyword">while</span> node1 <span class="keyword">and</span> node1.<span class="built_in">next</span>: <span class="comment">#确保总结俩个有，前后可以为null</span></span><br><span class="line">            node2 = node1.<span class="built_in">next</span></span><br><span class="line">            node3 = node2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            node0.<span class="built_in">next</span> = node2 <span class="comment">#注意：前面是next，修改的是指向的指针</span></span><br><span class="line">            node2.<span class="built_in">next</span> = node1</span><br><span class="line">            node1.<span class="built_in">next</span> = node3</span><br><span class="line"></span><br><span class="line">            node0 = node1</span><br><span class="line">            node1 = node3</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dum.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="28-随机链表的复制"><a href="#28-随机链表的复制" class="headerlink" title="28. 随机链表的复制"></a>28. 随机链表的复制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyRandomList</span>(<span class="params">self, head: <span class="string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="string">&#x27;Optional[Node]&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span>  <span class="comment"># 先定义边界情况</span></span><br><span class="line">        dic = &#123;&#125;  <span class="comment"># defaultdict很难给参数</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            dic[cur] = Node(cur.val)</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            dic[cur].<span class="built_in">next</span> = dic.get(cur.<span class="built_in">next</span>)</span><br><span class="line">            dic[cur].random = dic.get(cur.random)</span><br><span class="line">            cur = cur.<span class="built_in">next</span>  <span class="comment"># 一定要记住，这咋总忘</span></span><br><span class="line">        <span class="keyword">return</span> dic[head]</span><br></pre></td></tr></table></figure><h3 id="29-排序链表"><a href="#29-排序链表" class="headerlink" title="29. 排序链表"></a>29. 排序链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>: <span class="keyword">return</span> head <span class="comment"># 只有一个</span></span><br><span class="line">        show, fast = head, head.<span class="built_in">next</span> <span class="comment"># ！切开了</span></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line">            show = show.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        mid = show.<span class="built_in">next</span></span><br><span class="line">        show.<span class="built_in">next</span> = <span class="literal">None</span> <span class="comment">#分割成俩部分</span></span><br><span class="line"></span><br><span class="line">        left, right = <span class="variable language_">self</span>.sortList(head), <span class="variable language_">self</span>.sortList(mid) <span class="comment"># 归并排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 变成排序序列部分</span></span><br><span class="line">        <span class="comment"># 重新放到h上去，res是tmp</span></span><br><span class="line">        h = res = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">if</span> left.val &lt; right.val:</span><br><span class="line">                h.<span class="built_in">next</span>, left = left, left.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                h.<span class="built_in">next</span>, right = right, right.<span class="built_in">next</span></span><br><span class="line">            h = h.<span class="built_in">next</span></span><br><span class="line">        h.<span class="built_in">next</span> = left <span class="keyword">if</span> left <span class="keyword">else</span> right</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="30-LRU-缓存"><a href="#30-LRU-缓存" class="headerlink" title="30. LRU 缓存"></a>30. LRU 缓存</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    __slots__ = <span class="string">&#x27;prev&#x27;</span>, <span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key=<span class="number">0</span>, value=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.key = key</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.capacity = capacity</span><br><span class="line">        <span class="variable language_">self</span>.dummy = Node()</span><br><span class="line">        <span class="variable language_">self</span>.dummy.prev = <span class="variable language_">self</span>.dummy</span><br><span class="line">        <span class="variable language_">self</span>.dummy.<span class="built_in">next</span> = <span class="variable language_">self</span>.dummy</span><br><span class="line">        <span class="variable language_">self</span>.key_to_node = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, x: Node</span>) -&gt; Node:</span><br><span class="line">        x.prev.<span class="built_in">next</span> = x.<span class="built_in">next</span>  <span class="comment"># 删掉一个</span></span><br><span class="line">        x.<span class="built_in">next</span>.prev = x.prev</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push_front</span>(<span class="params">self, x: Node</span>) -&gt; Node:</span><br><span class="line">        x.prev = <span class="variable language_">self</span>.dummy</span><br><span class="line">        x.<span class="built_in">next</span> = <span class="variable language_">self</span>.dummy.<span class="built_in">next</span>  <span class="comment"># next!!</span></span><br><span class="line">        x.prev.<span class="built_in">next</span> = x</span><br><span class="line">        x.<span class="built_in">next</span>.prev = x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_node</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[Node]:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.key_to_node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = <span class="variable language_">self</span>.key_to_node[key]</span><br><span class="line">        <span class="variable language_">self</span>.remove(node)</span><br><span class="line">        <span class="variable language_">self</span>.push_front(node)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.get_node(key)</span><br><span class="line">        <span class="keyword">return</span> node.value <span class="keyword">if</span> node <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key: <span class="built_in">int</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        node = <span class="variable language_">self</span>.get_node(key)</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            node.value = value</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="variable language_">self</span>.key_to_node[key] = node = Node(key, value)</span><br><span class="line">        <span class="variable language_">self</span>.push_front(node)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.key_to_node) &gt; <span class="variable language_">self</span>.capacity:</span><br><span class="line">            back_node = <span class="variable language_">self</span>.dummy.prev</span><br><span class="line">            <span class="keyword">del</span> <span class="variable language_">self</span>.key_to_node[back_node.key]</span><br><span class="line">            <span class="variable language_">self</span>.remove(back_node)</span><br></pre></td></tr></table></figure><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="31-二叉树的中序遍历"><a href="#31-二叉树的中序遍历" class="headerlink" title="31. 二叉树的中序遍历"></a>31. 二叉树的中序遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        WHITE, GRAY = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        stack = [(WHITE, root)]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> stack:  <span class="comment"># 不需要dfs，因为while了</span></span><br><span class="line">            color, node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">continue</span>  <span class="comment"># 这里判断了None！之前无需处理</span></span><br><span class="line">            <span class="keyword">if</span> color == WHITE:</span><br><span class="line">                stack.append((WHITE, node.right))</span><br><span class="line">                stack.append((GRAY, node))</span><br><span class="line">                stack.append((WHITE, node.left))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="32-二叉树的最大深度"><a href="#32-二叉树的最大深度" class="headerlink" title="32. 二叉树的最大深度"></a>32. 二叉树的最大深度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        l_depth = <span class="variable language_">self</span>.maxDepth(root.left)</span><br><span class="line">        r_depth = <span class="variable language_">self</span>.maxDepth(root.right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(l_depth, r_depth) +<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="33-翻转二叉树"><a href="#33-翻转二叉树" class="headerlink" title="33. 翻转二叉树"></a>33. 翻转二叉树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invertTree</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span> <span class="comment">#主要是为了终止，有啥返回啥</span></span><br><span class="line">        left = <span class="variable language_">self</span>.invertTree(root.left)</span><br><span class="line">        right = <span class="variable language_">self</span>.invertTree(root.right)</span><br><span class="line">        root.left = right <span class="comment">#交换在呢</span></span><br><span class="line">        root.right = left</span><br><span class="line">        <span class="keyword">return</span> root <span class="comment">#交换完返回</span></span><br></pre></td></tr></table></figure><h3 id="34-对称二叉树"><a href="#34-对称二叉树" class="headerlink" title="34. 对称二叉树"></a>34. 对称二叉树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSymmetric</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.isSameTrue(root.left, root.right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSameTrue</span>(<span class="params">self, p:<span class="type">Optional</span>[TreeNode], q:<span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> q <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> p <span class="keyword">is</span> q  <span class="comment"># 用==也可以；==判断的是值；is判断的是指针</span></span><br><span class="line">        <span class="keyword">return</span> p.val == q.val <span class="keyword">and</span> <span class="variable language_">self</span>.isSameTrue(p.left, q.right) <span class="keyword">and</span> <span class="variable language_">self</span>.isSameTrue(p.right, q.left)</span><br></pre></td></tr></table></figure><h3 id="35-二叉树的直径"><a href="#35-二叉树的直径" class="headerlink" title="35. 二叉树的直径"></a>35. 二叉树的直径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">diameterOfBinaryTree</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node:<span class="type">Optional</span>[TreeNode]</span>) -&gt;<span class="built_in">int</span>:</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 减去最后一个node</span></span><br><span class="line"></span><br><span class="line">            l_len = dfs(node.left) + <span class="number">1</span></span><br><span class="line">            r_len = dfs(node.right) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">nonlocal</span> ans</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, l_len + r_len)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(l_len, r_len)</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="36-二叉树的层序遍历"><a href="#36-二叉树的层序遍历" class="headerlink" title="36. 二叉树的层序遍历"></a>36. 二叉树的层序遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []  <span class="comment"># 没有就返回空</span></span><br><span class="line"></span><br><span class="line">        q = deque([root]) <span class="comment"># 先把root加进来</span></span><br><span class="line">        ans = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            vals=[]</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(q)):</span><br><span class="line">                node = q.popleft()</span><br><span class="line">                vals.append(node.val)  <span class="comment"># 不用判断node是否有值？因为root判断过了，后面加入的时候判断过了</span></span><br><span class="line">                <span class="keyword">if</span> node.left : q.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right :q.append(node.right)</span><br><span class="line">            ans.append(vals)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="37-将有序数组转换为二叉搜索树"><a href="#37-将有序数组转换为二叉搜索树" class="headerlink" title="37. 将有序数组转换为二叉搜索树"></a>37. 将有序数组转换为二叉搜索树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedArrayToBST</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 空树就是None</span></span><br><span class="line">        m = <span class="built_in">len</span>(nums) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> TreeNode(nums[m], <span class="variable language_">self</span>.sortedArrayToBST(nums[:m]), <span class="variable language_">self</span>.sortedArrayToBST(nums[m + <span class="number">1</span>:])) <span class="comment">#cool</span></span><br></pre></td></tr></table></figure><h3 id="38-验证二叉搜索树"><a href="#38-验证二叉搜索树" class="headerlink" title="38. 验证二叉搜索树"></a>38. 验证二叉搜索树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValidBST</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode], left = -inf, right = inf</span>) -&gt; <span class="built_in">bool</span>:  <span class="comment"># ！！还修改了参数</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        x = root.val</span><br><span class="line">        <span class="keyword">return</span> left &lt; x &lt; right <span class="keyword">and</span> <span class="variable language_">self</span>.isValidBST(root.left, left, x) <span class="keyword">and</span> <span class="variable language_">self</span>.isValidBST(root.right, x, right)</span><br></pre></td></tr></table></figure><h3 id="39-二叉搜索树中第-K-小的元素"><a href="#39-二叉搜索树中第-K-小的元素" class="headerlink" title="39. 二叉搜索树中第 K 小的元素"></a>39. 二叉搜索树中第 K 小的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kthSmallest</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node: <span class="type">Optional</span>[TreeNode]</span>):</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 找不到设定为-1</span></span><br><span class="line">            left_res = dfs(node.left)</span><br><span class="line">            <span class="keyword">if</span> left_res != -<span class="number">1</span>:  <span class="comment"># 精髓，这个值都可以，随便拿来判断的</span></span><br><span class="line">                <span class="keyword">return</span> left_res</span><br><span class="line">            <span class="keyword">nonlocal</span> k</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 很nice的想法</span></span><br><span class="line">                <span class="keyword">return</span> node.val</span><br><span class="line">            <span class="keyword">return</span> dfs(node.right)</span><br><span class="line">        <span class="keyword">return</span> dfs(root)  <span class="comment"># 这里没要ans，直接return就行</span></span><br></pre></td></tr></table></figure><h3 id="40-二叉树的右视图"><a href="#40-二叉树的右视图" class="headerlink" title="40. 二叉树的右视图"></a>40. 二叉树的右视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rightSideView</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node: <span class="type">Optional</span>[TreeNode], depth:<span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 对于空的不用操作</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> depth == <span class="built_in">len</span>(ans):     <span class="comment"># 因为depth + 1，所以无需减一</span></span><br><span class="line">                ans.append(node.val)  <span class="comment"># 绝妙，一层就一个</span></span><br><span class="line">                                      <span class="comment"># 注意不是return是apend，一层加一个</span></span><br><span class="line">            dfs(node.right, depth + <span class="number">1</span>)</span><br><span class="line">            dfs(node.left, depth + <span class="number">1</span>)</span><br><span class="line">        dfs(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="41-二叉树展开为链表"><a href="#41-二叉树展开为链表" class="headerlink" title="41. 二叉树展开为链表"></a>41. 二叉树展开为链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">flatten</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span>  <span class="comment"># 链表也不需要什么返回值</span></span><br><span class="line">        <span class="variable language_">self</span>.flatten(root.right)  <span class="comment"># 先展开右边，</span></span><br><span class="line">        <span class="variable language_">self</span>.flatten(root.left)</span><br><span class="line">        root.left = <span class="literal">None</span>                <span class="comment"># 都是在root上做改变，依次加入</span></span><br><span class="line">        root.right = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="variable language_">self</span>.head = root                <span class="comment"># 迭代</span></span><br></pre></td></tr></table></figure><h3 id="42-从前序与中序遍历序列构造二叉树"><a href="#42-从前序与中序遍历序列构造二叉树" class="headerlink" title="42. 从前序与中序遍历序列构造二叉树"></a>42. 从前序与中序遍历序列构造二叉树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildTree</span>(<span class="params">self, preorder: <span class="type">List</span>[<span class="built_in">int</span>], inorder: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> preorder: <span class="comment"># preorder 是列表，所以是not表示为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        left_size = inorder.index(preorder[<span class="number">0</span>])</span><br><span class="line">        left = <span class="variable language_">self</span>.buildTree(preorder[<span class="number">1</span> : <span class="number">1</span> + left_size], inorder[: left_size])</span><br><span class="line">        right = <span class="variable language_">self</span>.buildTree(preorder[<span class="number">1</span> + left_size:], inorder[<span class="number">1</span> + left_size: ])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> TreeNode(preorder[<span class="number">0</span>], left, right)</span><br></pre></td></tr></table></figure><h3 id="43-路径总和-III"><a href="#43-路径总和-III" class="headerlink" title="43. 路径总和 III"></a>43. 路径总和 III</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pathSum</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode], targetSum: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        cnt = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        cnt[<span class="number">0</span>] = <span class="number">1</span>  <span class="comment"># ！！0 一定要加进来</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node:<span class="type">Optional</span>[TreeNode], s:<span class="built_in">int</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">nonlocal</span> ans</span><br><span class="line">            s += node.val  <span class="comment"># s是前缀和，加上所有val</span></span><br><span class="line">            ans += cnt[s - targetSum]  <span class="comment"># 前缀和 - k</span></span><br><span class="line"></span><br><span class="line">            cnt[s] += <span class="number">1</span>  <span class="comment"># 前缀和加一</span></span><br><span class="line">            dfs(node.left, s)</span><br><span class="line">            dfs(node.right, s)</span><br><span class="line">            cnt[s] -= <span class="number">1</span>  <span class="comment"># 回复现场，走完left，走right要恢复</span></span><br><span class="line">                         <span class="comment"># s保存在参数里面了，ans就加所以都不需要保护</span></span><br><span class="line"></span><br><span class="line">        dfs(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="44-二叉树的最近公共祖先"><a href="#44-二叉树的最近公共祖先" class="headerlink" title="44. 二叉树的最近公共祖先"></a>44. 二叉树的最近公共祖先</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lowestCommonAncestor</span>(<span class="params">self, root: <span class="string">&#x27;TreeNode&#x27;</span>, p: <span class="string">&#x27;TreeNode&#x27;</span>, q: <span class="string">&#x27;TreeNode&#x27;</span></span>) -&gt; <span class="string">&#x27;TreeNode&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">in</span> (<span class="literal">None</span>, p, q):</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        left = <span class="variable language_">self</span>.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        right = <span class="variable language_">self</span>.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">        <span class="keyword">if</span> left <span class="keyword">and</span> right: <span class="comment">#都有，返回公共祖先</span></span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> left <span class="keyword">or</span> right <span class="comment">#在一个分支，返回该分支</span></span><br></pre></td></tr></table></figure><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="45-岛屿数量"><a href="#45-岛屿数量" class="headerlink" title="45. 岛屿数量"></a>45. 岛屿数量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= m <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= n <span class="keyword">or</span> grid[i][j] != <span class="string">&#x27;1&#x27;</span>:  <span class="comment"># 一定是字符串</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            grid[i][j] = <span class="string">&#x27;2&#x27;</span>  <span class="comment"># 已访问过给换个数，就不会再访问了</span></span><br><span class="line">            dfs(i - <span class="number">1</span>, j)</span><br><span class="line">            dfs(i + <span class="number">1</span>, j)</span><br><span class="line">            dfs(i, j - <span class="number">1</span>)</span><br><span class="line">            dfs(i, j + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(grid):  <span class="comment"># 有意思的双重enumerate循环</span></span><br><span class="line">            <span class="keyword">for</span> j, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(row):</span><br><span class="line">                <span class="keyword">if</span> c == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    dfs(i, j)</span><br><span class="line">                    ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="46-腐烂的橘子"><a href="#46-腐烂的橘子" class="headerlink" title="46. 腐烂的橘子"></a>46. 腐烂的橘子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">orangesRotting</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        row, col = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        rotten = &#123;(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col) <span class="keyword">if</span> grid[i][j] == <span class="number">2</span>&#125;  <span class="comment"># 优雅！</span></span><br><span class="line">        fresh = &#123;(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col) <span class="keyword">if</span> grid[i][j] == <span class="number">1</span>&#125;</span><br><span class="line">        time = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> fresh:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> rotten: <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 边界情况，不可能腐烂所有橘子</span></span><br><span class="line">            rotten = &#123;(i + di, j + dj) <span class="keyword">for</span> i, j <span class="keyword">in</span> rotten <span class="keyword">for</span> di, dj <span class="keyword">in</span> [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (-<span class="number">1</span>, <span class="number">0</span>)] <span class="keyword">if</span> (i + di, j + dj) <span class="keyword">in</span> fresh&#125;</span><br><span class="line">            <span class="comment"># 一定要加[]</span></span><br><span class="line">            <span class="comment"># roten前面不用加enumerate，它会多加一个idx维度，并不需要，直接取is ok</span></span><br><span class="line">            fresh -= rotten</span><br><span class="line">            time += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> time</span><br></pre></td></tr></table></figure><h3 id="47-课程表"><a href="#47-课程表" class="headerlink" title="47. 课程表"></a>47. 课程表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canFinish</span>(<span class="params">self, numCourses: <span class="built_in">int</span>, prerequisites: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        indegrees = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(numCourses)] <span class="comment"># 入度</span></span><br><span class="line">        adjacency = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(numCourses)] <span class="comment"># 邻接表</span></span><br><span class="line">        <span class="comment"># [0, 0, 0, 0, 0, 0, 0, 0, 0, 0][[], [], [], [], [], [], [], [], [], []]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># indegrees = [0] * numCourses   # 入度</span></span><br><span class="line">        <span class="comment"># adjacency = [[] * numCourses]  # 邻接表</span></span><br><span class="line">        <span class="comment"># [0, 0, 0, 0, 0, 0, 0, 0, 0, 0][[]]  # 一定要for循环，直接*就没了</span></span><br><span class="line"></span><br><span class="line">        queue = deque()  <span class="comment"># defaultdict是字典，deque()是双端队列</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> cur, pre <span class="keyword">in</span> prerequisites:  <span class="comment"># 是in，不是enumerate</span></span><br><span class="line">            indegrees[cur] += <span class="number">1</span> <span class="comment">#构建入度list</span></span><br><span class="line">            adjacency[pre].append(cur)  <span class="comment"># 因为是列表，所以是append</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(indegrees)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> indegrees[i]: queue.append(i) <span class="comment">#入度为0开始删除</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            pre = queue.popleft() <span class="comment">#取出来</span></span><br><span class="line">            numCourses -= <span class="number">1</span> <span class="comment">#！！课程删掉（接下来就回删完掉）</span></span><br><span class="line">            <span class="keyword">for</span> cur <span class="keyword">in</span> adjacency[pre]: <span class="comment">#取出该课程对应的所有后面的课程</span></span><br><span class="line">                indegrees[cur] -= <span class="number">1</span> <span class="comment">#删除邻接</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> indegrees[cur]: queue.append(cur) <span class="comment">#删掉后，把新得到的入度为0的加入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> numCourses</span><br></pre></td></tr></table></figure><h3 id="48-实现-Trie-前缀树"><a href="#48-实现-Trie-前缀树" class="headerlink" title="48. 实现 Trie (前缀树)"></a>48. 实现 Trie (前缀树)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.son = &#123;&#125;</span><br><span class="line">        <span class="variable language_">self</span>.end = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = Node()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        cur = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> cur.son:</span><br><span class="line">                cur.son[c] = Node()</span><br><span class="line">            cur = cur.son[c]</span><br><span class="line">        cur.end = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        cur = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> cur.son:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            cur = cur.son[c]</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> <span class="keyword">if</span> cur.end <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.find(word) == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startsWith</span>(<span class="params">self, prefix: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.find(prefix) != <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="49-全排列"><a href="#49-全排列" class="headerlink" title="49. 全排列"></a>49. 全排列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):  <span class="comment"># i是前面多少个固定了</span></span><br><span class="line">            <span class="keyword">if</span> i == n - <span class="number">1</span>: <span class="comment"># 也可以是n，但是自己和自己无需改变，下面的循环不会执行</span></span><br><span class="line">                ans.append(nums.copy())  <span class="comment"># 不同的nums加入res</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">                nums[i], nums[j] = nums[j], nums[i]  <span class="comment"># 只交换后面的，前面的固定了</span></span><br><span class="line">                dfs(i + <span class="number">1</span>)  <span class="comment"># ！！变i</span></span><br><span class="line">                nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="50-子集"><a href="#50-子集" class="headerlink" title="50. 子集"></a>50. 子集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            ans.append(path.copy())</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">                path.append(nums[j])</span><br><span class="line">                dfs(j + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="51-电话号码的字母组合"><a href="#51-电话号码的字母组合" class="headerlink" title="51. 电话号码的字母组合"></a>51. 电话号码的字母组合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MAPPING = <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(digits)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:  <span class="comment"># 需要处理一下，不然加入&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        ans = []</span><br><span class="line">        path = [<span class="string">&#x27;&#x27;</span>] * n  <span class="comment"># 一定是n个</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:  <span class="comment"># 0到n-1次（n个）加入字符完成！在n次只是append</span></span><br><span class="line">                ans.append(<span class="string">&#x27;&#x27;</span>.join(path))  <span class="comment"># 变成字符串了，不用copy了</span></span><br><span class="line">                <span class="keyword">return</span> <span class="comment"># 记得return</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> MAPPING[<span class="built_in">int</span>(digits[i])]:   <span class="comment"># i是第i个数字：digits[i]</span></span><br><span class="line">                path[i] = c</span><br><span class="line">                dfs(i + <span class="number">1</span>)</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="52-组合总和"><a href="#52-组合总和" class="headerlink" title="52. 组合总和"></a>52. 组合总和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, left</span>):</span><br><span class="line">            <span class="keyword">if</span> left == <span class="number">0</span>:  <span class="comment"># 合理的情况</span></span><br><span class="line">                ans.append(path.copy())  <span class="comment"># 不copy结果会为最后清空的path：null</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="built_in">len</span>(candidates) <span class="keyword">or</span> left &lt; <span class="number">0</span>:  <span class="comment"># 不合理的情况</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            dfs(i + <span class="number">1</span>, left)  <span class="comment"># 不选当前的candidate</span></span><br><span class="line"></span><br><span class="line">            path.append(candidates[i])</span><br><span class="line">            dfs(i, left - candidates[i])  <span class="comment"># 选当前的candidate</span></span><br><span class="line">            path.pop()</span><br><span class="line">        dfs(<span class="number">0</span>, target)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="53-括号生成"><a href="#53-括号生成" class="headerlink" title="53. 括号生成"></a>53. 括号生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateParenthesis</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        m = n * <span class="number">2</span>  <span class="comment"># 不一样的地方，俩个double一下</span></span><br><span class="line">        ans = []</span><br><span class="line">        path = [<span class="string">&#x27;&#x27;</span>] * m</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, <span class="built_in">open</span></span>):</span><br><span class="line">            <span class="keyword">if</span> i == m:</span><br><span class="line">                ans.append(<span class="string">&#x27;&#x27;</span>.join(path))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">open</span> &lt; n:  <span class="comment"># ！！限制左括号最多填写n个</span></span><br><span class="line">                path[i] = <span class="string">&#x27;(&#x27;</span></span><br><span class="line">                dfs(i + <span class="number">1</span>, <span class="built_in">open</span> + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> i - <span class="built_in">open</span> &lt; <span class="built_in">open</span>:  <span class="comment"># 限制右括号最多填n个</span></span><br><span class="line">                path[i] = <span class="string">&quot;)&quot;</span></span><br><span class="line">                dfs(i + <span class="number">1</span>, <span class="built_in">open</span>)  <span class="comment"># open不用+1了</span></span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="54-单词搜索"><a href="#54-单词搜索" class="headerlink" title="54. 单词搜索"></a>54. 单词搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exist</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]], word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])  <span class="comment"># 不需要给其他空间</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, j, k</span>):</span><br><span class="line">            <span class="keyword">if</span> board[i][j] != word[k]:  <span class="comment"># 失败的情况</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> k == <span class="built_in">len</span>(word) - <span class="number">1</span>:  <span class="comment"># 最后一个也成功，就成功，这个必须在上面的下面</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 上面这俩个一定是先判断最后一个，加入，再判断成功；为了防止只有一个的情况，下面就需要走动了。</span></span><br><span class="line">            board[i][j] = <span class="string">&quot;&quot;</span>  <span class="comment"># 访问过就置空，和恢复一起写</span></span><br><span class="line">            <span class="keyword">for</span> x, y <span class="keyword">in</span> (i + <span class="number">1</span>, j), (i - <span class="number">1</span>, j), (i, j + <span class="number">1</span>), (i, j - <span class="number">1</span>): <span class="comment">#这里取不需要加[]</span></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; m <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; n <span class="keyword">and</span> dfs(x, y, k + <span class="number">1</span>): <span class="comment"># 搜到多条路径，k+1是ok，k也是ok？</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            board[i][j] = word[k]  <span class="comment"># 还原</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">any</span>(dfs(i, j, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n))  <span class="comment"># k是0开始走，循环所有起点</span></span><br><span class="line">                                                                      <span class="comment"># 不用[]，一个就好，用any()包着</span></span><br></pre></td></tr></table></figure><h3 id="55-分割回文串"><a href="#55-分割回文串" class="headerlink" title="55. 分割回文串"></a>55. 分割回文串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        path = []</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):  <span class="comment"># 分割到了长度i</span></span><br><span class="line">            <span class="keyword">if</span> i == n:  <span class="comment"># 实际为n - 1，但是调入循环会加1，所以判断n</span></span><br><span class="line">                ans.append(path.copy())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):  <span class="comment"># 继续往后分割</span></span><br><span class="line">                t = s[i: j + <span class="number">1</span>]  <span class="comment"># i已经是了，判断i-n的，以j为分割点，判断i:j是不是</span></span><br><span class="line">                <span class="keyword">if</span> t == t[::-<span class="number">1</span>]:</span><br><span class="line">                    path.append(t)</span><br><span class="line">                    dfs(j + <span class="number">1</span>)  <span class="comment"># 这里的+1和上面的+1都是取不到的</span></span><br><span class="line">                    path.pop()</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="56-搜索插入位置"><a href="#56-搜索插入位置" class="headerlink" title="56. 搜索插入位置"></a>56. 搜索插入位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总结</span></span><br><span class="line"><span class="comment"># 1. 初始化 +1/-1</span></span><br><span class="line"><span class="comment"># 2. while &lt;= , &lt; , + 1 &lt;</span></span><br><span class="line"><span class="comment"># 3. mid +1/-1</span></span><br><span class="line"><span class="comment"># 4. 返回值：left、left/right、right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭区间写法 [left, right]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lower_bound</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target:  <span class="comment"># 三个都是小于</span></span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左闭右开区间写法 [left, right)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lower_bound2</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:  <span class="comment"># 区间不为空</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span>  <span class="comment"># 范围缩小到 [mid+1, right)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid  <span class="comment"># 范围缩小到 [left, mid)</span></span><br><span class="line">    <span class="keyword">return</span> left  <span class="comment"># 或者 right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开区间写法 (left, right)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lower_bound3</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    left, right = -<span class="number">1</span>, <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">while</span> left + <span class="number">1</span> &lt; right:  <span class="comment"># 区间不为空</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">            left = mid  <span class="comment"># 开区间不需要+1/-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">    <span class="keyword">return</span> right</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> lower_bound(nums, target)</span><br></pre></td></tr></table></figure><h3 id="57-搜索二维矩阵"><a href="#57-搜索二维矩阵" class="headerlink" title="57. 搜索二维矩阵"></a>57. 搜索二维矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchMatrix</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        left, right = -<span class="number">1</span>, m * n  <span class="comment"># 还是一样的-1</span></span><br><span class="line">        <span class="keyword">while</span> left + <span class="number">1</span> &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            x = matrix[mid // n][mid % n]  <span class="comment"># 除以列，得到行</span></span><br><span class="line">            <span class="keyword">if</span> x == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> x &lt; target:</span><br><span class="line">                left = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="58-在排序数组中查找元素的第一个和最后一个位置"><a href="#58-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="58. 在排序数组中查找元素的第一个和最后一个位置"></a>58. 在排序数组中查找元素的第一个和最后一个位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lower_bound</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchRange</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        start = <span class="variable language_">self</span>.lower_bound(nums, target)</span><br><span class="line">        <span class="keyword">if</span> start == <span class="built_in">len</span>(nums) <span class="keyword">or</span> nums[start] != target:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        end = <span class="variable language_">self</span>.lower_bound(nums, target + <span class="number">1</span>) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> [start, end]</span><br></pre></td></tr></table></figure><h3 id="59-搜索旋转排序数组"><a href="#59-搜索旋转排序数组" class="headerlink" title="59. 搜索旋转排序数组"></a>59. 搜索旋转排序数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMin</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        left, right = -<span class="number">1</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>  <span class="comment"># 最后一个作为比较的target</span></span><br><span class="line">        <span class="keyword">while</span> left + <span class="number">1</span> &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; nums[-<span class="number">1</span>]:  <span class="comment"># 二分是 &lt;</span></span><br><span class="line">                left = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lower_bound</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], left: <span class="built_in">int</span>, right: <span class="built_in">int</span>, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">while</span> left + <span class="number">1</span> &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">        <span class="keyword">return</span> right <span class="keyword">if</span> nums[right] == target <span class="keyword">else</span> -<span class="number">1</span>  <span class="comment"># 非常重要的判断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        i = <span class="variable language_">self</span>.findMin(nums)</span><br><span class="line">        <span class="keyword">if</span> target &gt; nums[-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.lower_bound(nums, -<span class="number">1</span>, i, target)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.lower_bound(nums, i - <span class="number">1</span>, <span class="built_in">len</span>(nums), target)</span><br></pre></td></tr></table></figure><h3 id="60-寻找旋转排序数组中的最小值"><a href="#60-寻找旋转排序数组中的最小值" class="headerlink" title="60. 寻找旋转排序数组中的最小值"></a>60. 寻找旋转排序数组中的最小值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMin</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = -<span class="number">1</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left + <span class="number">1</span> &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; nums[-<span class="number">1</span>]:</span><br><span class="line">                left = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">        <span class="keyword">return</span> nums[right]</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="61-有效的括号"><a href="#61-有效的括号" class="headerlink" title="61. 有效的括号"></a>61. 有效的括号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        dic = &#123;<span class="string">&#x27;(&#x27;</span>:<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>:<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;[&#x27;</span>:<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;?&#x27;</span>:<span class="string">&#x27;?&#x27;</span>&#125;</span><br><span class="line">        stack = [<span class="string">&#x27;?&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dic:</span><br><span class="line">                stack.append(c)</span><br><span class="line">            <span class="keyword">elif</span> dic[stack.pop()] != c:  <span class="comment"># 直接放里面pop，不对的直接失败了</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="62-最小栈"><a href="#62-最小栈" class="headerlink" title="62. 最小栈"></a>62. 最小栈</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.stack:</span><br><span class="line">            <span class="variable language_">self</span>.stack.append((val, val))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.stack.append((val, <span class="built_in">min</span>(val, <span class="variable language_">self</span>.stack[-<span class="number">1</span>][<span class="number">1</span>])))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.stack.pop()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.stack[-<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMin</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.stack[-<span class="number">1</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="63-字符串解码"><a href="#63-字符串解码" class="headerlink" title="63. 字符串解码"></a>63. 字符串解码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decodeString</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        stack, res, multi = [], <span class="string">&quot;&quot;</span>, <span class="number">0</span>  <span class="comment"># res 是保存前面的结果</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&#x27;[&#x27;</span>:  <span class="comment"># 左括号加入当前的，字符一个一个加，一个一个压栈，并且清空当前</span></span><br><span class="line">                stack.append([multi, res])</span><br><span class="line">                multi, res = <span class="number">0</span>, <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> c == <span class="string">&#x27;]&#x27;</span>:  <span class="comment"># 右括号要进行结算了</span></span><br><span class="line">                cur_multi, cur_res = stack.pop()  <span class="comment"># 必须重命名，不然会把之前的覆盖掉</span></span><br><span class="line">                res = cur_res + cur_multi * res</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= c &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">                multi = multi * <span class="number">10</span> + <span class="built_in">int</span>(c)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += c</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="64-每日温度"><a href="#64-每日温度" class="headerlink" title="64. 每日温度"></a>64. 每日温度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dailyTemperatures</span>(<span class="params">self, temperatures: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(temperatures)</span><br><span class="line">        ans = [<span class="number">0</span>] * n  <span class="comment"># 因为后面后ans[i]，所以这里要提前指明大小</span></span><br><span class="line">        st = []  <span class="comment"># 单调栈</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 从后往前统计</span></span><br><span class="line">            t = temperatures[i]</span><br><span class="line">            <span class="keyword">while</span> st <span class="keyword">and</span> t &gt;= temperatures[st[-<span class="number">1</span>]]:   <span class="comment"># 单调是不可以等于的&gt;，所以相反的是&lt;=</span></span><br><span class="line">                                                      <span class="comment"># 注意是while，所有不合法的都抛弃</span></span><br><span class="line">                st.pop()  <span class="comment"># 先判断是否右st，所以就是要pop st</span></span><br><span class="line">            <span class="keyword">if</span> st:  <span class="comment"># 上面pop完了，可能没有了，还需判断是否</span></span><br><span class="line">                ans[i] = st[-<span class="number">1</span>] - i</span><br><span class="line">            st.append(i)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="65-数组中的第K个最大元素"><a href="#65-数组中的第K个最大元素" class="headerlink" title="65. 数组中的第K个最大元素"></a>65. 数组中的第K个最大元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findKthLargest</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">maxHepify</span>(<span class="params">arr, i, end</span>):  <span class="comment"># 大顶堆[下标0表示堆顶]</span></span><br><span class="line">                                     <span class="comment"># 当前需要调整的节点索引i， end值保证边界</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span>  <span class="comment"># j为i的左子节点</span></span><br><span class="line">            <span class="keyword">while</span> j &lt;= end:  <span class="comment"># 自上而下进行调整</span></span><br><span class="line">                <span class="keyword">if</span> j + <span class="number">1</span> &lt;= end <span class="keyword">and</span> arr[j + <span class="number">1</span>] &gt; arr[j]:  <span class="comment"># i的左右子节点分别为j和j+1</span></span><br><span class="line">                    j += <span class="number">1</span>  <span class="comment"># 取两者之间的较大者</span></span><br><span class="line">                <span class="keyword">if</span> arr[i] &lt; arr[j]:</span><br><span class="line">                    arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">                    i = j  <span class="comment"># 往下走：i调整为其子节点</span></span><br><span class="line">                    j = <span class="number">2</span> * i + <span class="number">1</span>  <span class="comment"># j调整左子节点</span></span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># 一定要记住break！！</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 建堆【大顶堆】</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n // <span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 第一个非叶子节点：n//2-1 (-1是因为从坐标0开始)</span></span><br><span class="line">            maxHepify(nums, i, n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, n - k - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            nums[<span class="number">0</span>], nums[j] = nums[j], nums[<span class="number">0</span>]  <span class="comment"># 堆顶元素（当前最大值）放置到尾部j</span></span><br><span class="line">            maxHepify(nums, <span class="number">0</span>, j - <span class="number">1</span>)  <span class="comment"># j不变，j-1变成尾部，并从堆顶0开始调</span></span><br><span class="line">        <span class="keyword">return</span> nums[-k] <span class="comment"># 最大的依次放到最后面，最大放到n-1，然后n-2，所以k就是n-k</span></span><br></pre></td></tr></table></figure><h3 id="66-前-K-个高频元素"><a href="#66-前-K-个高频元素" class="headerlink" title="66. 前 K 个高频元素"></a>66. 前 K 个高频元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">topKFrequent</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        count = collections.Counter(nums) <span class="comment"># 注意Counter大写</span></span><br><span class="line">        heap = [(val, key) <span class="keyword">for</span> key, val <span class="keyword">in</span> count.items()]</span><br><span class="line">        <span class="keyword">return</span> [item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> heapq.nlargest(k, heap)]  <span class="comment"># item[1]是[]，而不是()</span></span><br><span class="line">                                                              <span class="comment"># heapq: python小根堆</span></span><br><span class="line">                                                              <span class="comment"># nlargest,k是返回k个</span></span><br></pre></td></tr></table></figure><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><h3 id="67-买卖股票的最佳时机"><a href="#67-买卖股票的最佳时机" class="headerlink" title="67. 买卖股票的最佳时机"></a>67. 买卖股票的最佳时机</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        min_price = prices[<span class="number">0</span>]  <span class="comment"># 必须分开来初始化，ans要0</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> prices:</span><br><span class="line">            min_price = <span class="built_in">min</span>(min_price, p)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, p - min_price)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="68-跳跃游戏"><a href="#68-跳跃游戏" class="headerlink" title="68. 跳跃游戏"></a>68. 跳跃游戏</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canJump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        cover = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums): <span class="comment"># 虽然最后一个nums的值用不到，但是需要用来判断是否出界，所以需要循环到</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; cover:  <span class="comment"># ！！首先进行判断，然后才更新cover： 出范围了， 跳不到</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            cover = <span class="built_in">max</span>(cover, i + x)  <span class="comment"># 当前格点 + 可跳范围</span></span><br><span class="line">            <span class="keyword">if</span> cover &gt;= <span class="built_in">len</span>(nums) - <span class="number">1</span>:   <span class="comment"># 注意是&gt;=，且len - 1，因为下标从0开始。</span></span><br><span class="line">                                         <span class="comment"># 到最后了</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="69-跳跃游戏-II"><a href="#69-跳跃游戏-II" class="headerlink" title="69. 跳跃游戏 II"></a>69. 跳跃游戏 II</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        cur_right = <span class="number">0</span> <span class="comment"># 已建造的桥的右端点</span></span><br><span class="line">        next_right = <span class="number">0</span>  <span class="comment"># 下一座桥的右端点的最大值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>):  <span class="comment"># ！！考虑的是是否能到n - 1的位置，所以n - 1的值没啥用，不取最后一个，所以不用enumerate</span></span><br><span class="line">            next_right = <span class="built_in">max</span>(next_right, i + nums[i])</span><br><span class="line">            <span class="keyword">if</span> i == cur_right: <span class="comment"># 到达已建造的桥的右端点</span></span><br><span class="line">                cur_right = next_right <span class="comment"># 造一座桥</span></span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="70-划分字母区间"><a href="#70-划分字母区间" class="headerlink" title="70. 划分字母区间"></a>70. 划分字母区间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partitionLabels</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        last = &#123;c : i <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(s)&#125;  <span class="comment"># 太酷啦！每个字母最后出现的下标</span></span><br><span class="line">        <span class="built_in">print</span>(last)</span><br><span class="line">        start = end = <span class="number">0</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):  <span class="comment"># 和last一致</span></span><br><span class="line">            end = <span class="built_in">max</span>(end, last[c])  <span class="comment"># 更新当前区间右端点的最大值</span></span><br><span class="line">            <span class="keyword">if</span> i == end:  <span class="comment"># 直到i走到end，在考虑用下一个！！</span></span><br><span class="line">                ans.append(end - start + <span class="number">1</span>)  <span class="comment"># 区间长度加入答案</span></span><br><span class="line">                start = i + <span class="number">1</span>  <span class="comment"># 下一区间起点</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="71-爬楼梯"><a href="#71-爬楼梯" class="headerlink" title="71. 爬楼梯"></a>71. 爬楼梯</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        f = [<span class="number">0</span>] * (n + <span class="number">1</span>)              <span class="comment"># 一定是n + 1，因为爬n楼，第一层是0和1，虽然0没有，但是放一下</span></span><br><span class="line">        f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>                <span class="comment"># 初始化一定要有</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):      <span class="comment"># 因为上面有俩，所以从2开始，因为f是n+1，所以这里也到n+1</span></span><br><span class="line">            f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>] <span class="comment"># 最大范围n+1，这里也可以是n+1，所以直接f[i]</span></span><br><span class="line">        <span class="keyword">return</span> f[n]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># @cache</span></span><br><span class="line">        <span class="comment"># def dfs(i:int) -&gt; int:</span></span><br><span class="line">        <span class="comment">#     if i &lt;= 1:</span></span><br><span class="line">        <span class="comment">#         return 1</span></span><br><span class="line">        <span class="comment">#     return dfs(i - 1) + dfs(i - 2)</span></span><br><span class="line">        <span class="comment"># return dfs(n)</span></span><br></pre></td></tr></table></figure><h3 id="72-杨辉三角"><a href="#72-杨辉三角" class="headerlink" title="72. 杨辉三角"></a>72. 杨辉三角</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self, numRows: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        c = [[<span class="number">1</span>] * (i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numRows)]  <span class="comment"># 总共numRows行，直接放；因为i可能为0，所以i+1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, numRows):  <span class="comment"># 因为i - 1，所以i从1开始</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):    <span class="comment"># 因为j - 1，所以也从1开始</span></span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><h3 id="73-打家劫舍"><a href="#73-打家劫舍" class="headerlink" title="73. 打家劫舍"></a>73. 打家劫舍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        f = [<span class="number">0</span>] * (<span class="built_in">len</span>(nums) + <span class="number">2</span>) <span class="comment"># 所以这里+2</span></span><br><span class="line">        <span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums): <span class="comment"># 因为有nums就用enumerate，但是因为有相邻俩屋</span></span><br><span class="line">            f[i + <span class="number">2</span>] = <span class="built_in">max</span>(f[i + <span class="number">1</span>], f[i] + x)</span><br><span class="line">        <span class="keyword">return</span> f[-<span class="number">1</span>] <span class="comment"># 因为上面去max了，所以max和-1都是一样的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># @cache</span></span><br><span class="line">        <span class="comment"># def dfs(i:int) -&gt; int:</span></span><br><span class="line">        <span class="comment">#     if i &lt; 0:</span></span><br><span class="line">        <span class="comment">#         return 0</span></span><br><span class="line">        <span class="comment">#     return max( dfs(i - 1), dfs(i - 2) + nums[i])</span></span><br><span class="line">        <span class="comment"># return dfs(len(nums) - 1)</span></span><br></pre></td></tr></table></figure><h3 id="74-完全平方数"><a href="#74-完全平方数" class="headerlink" title="74. 完全平方数"></a>74. 完全平方数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numSquares</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        f = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(isqrt(n) + <span class="number">1</span>)]  <span class="comment">#需要这个数本身，所以需要+1。</span></span><br><span class="line">                                                          <span class="comment"># i是到了第几个平方数，j是当前的和</span></span><br><span class="line">        f[<span class="number">0</span>] = [<span class="number">0</span>] + [inf] * n  <span class="comment"># 取最小值，所以需要inf</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(f)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j &lt; i * i:</span><br><span class="line">                    f[i][j] = f[i - <span class="number">1</span>][j]  <span class="comment">#超出范围了，取上一个</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f[i][j] = <span class="built_in">min</span>(f[i - <span class="number">1</span>][j], f[i][j - i * i] + <span class="number">1</span>)  <span class="comment">#取上一个或者取当前的值</span></span><br><span class="line">        <span class="keyword">return</span> f[isqrt(n)][n]</span><br></pre></td></tr></table></figure><h3 id="75-零钱兑换"><a href="#75-零钱兑换" class="headerlink" title="75. 零钱兑换"></a>75. 零钱兑换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">self, coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(coins)</span><br><span class="line">        f = [[inf] * (amount + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="comment"># 所以是n + 1</span></span><br><span class="line">        <span class="comment"># 1. 后面这个是行，左边是列</span></span><br><span class="line">        <span class="comment"># 2. 因为要去最小值，就要inf</span></span><br><span class="line">        <span class="comment"># 3. 横轴n的coin是enumerate，所以0，n，</span></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span> <span class="comment"># 00这个一定要0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(coins): <span class="comment"># 固定：0,n -&gt; 所以是i + 1</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(amount + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> c &lt; x:</span><br><span class="line">                    f[i + <span class="number">1</span>][c] = f[i][c] <span class="comment"># i + 1还是i主要看第一层循环的起始</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f[i + <span class="number">1</span>][c] = <span class="built_in">min</span>(f[i][c], f[i + <span class="number">1</span>][c - x] + <span class="number">1</span>)</span><br><span class="line">        ans = f[n][amount]</span><br><span class="line">        <span class="keyword">return</span> ans <span class="keyword">if</span> ans &lt; inf <span class="keyword">else</span> -<span class="number">1</span>  <span class="comment"># ！！！ 对于没有找到的情况要做处理</span></span><br></pre></td></tr></table></figure><h3 id="76-单词拆分"><a href="#76-单词拆分" class="headerlink" title="76. 单词拆分"></a>76. 单词拆分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        max_len = <span class="built_in">max</span>(<span class="built_in">map</span>(<span class="built_in">len</span>, wordDict))  <span class="comment"># 用于限制下面 j 的循环次数</span></span><br><span class="line">        words = <span class="built_in">set</span>(wordDict)  <span class="comment"># set减少重复</span></span><br><span class="line"></span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        f = [<span class="literal">True</span>] + [<span class="literal">False</span>] * n <span class="comment"># 这个只有一个维度，因为总共有n个单词，第一个是为了凑数的，表示空</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>): <span class="comment"># 因为n个单词，加上一个空，所以从1到n+1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i - <span class="number">1</span>, <span class="built_in">max</span>(i - max_len - <span class="number">1</span>, -<span class="number">1</span>), -<span class="number">1</span>):  <span class="comment"># ！！往前退j个单词，看能否分割</span></span><br><span class="line">                <span class="keyword">if</span> f[j] <span class="keyword">and</span> s[j:i] <span class="keyword">in</span> words: <span class="comment"># f[j]是小单词，加上s[j:i]</span></span><br><span class="line">                    f[i] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span> <span class="comment"># ！！一定要break，跳出了j的循环，不然可能被修改！！</span></span><br><span class="line">        <span class="keyword">return</span> f[n] <span class="comment"># 不是最大值，给定的固定单词，所以就是最后一个</span></span><br></pre></td></tr></table></figure><h3 id="77-最长递增子序列"><a href="#77-最长递增子序列" class="headerlink" title="77. 最长递增子序列"></a>77. 最长递增子序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>: <span class="comment"># 子序列不需要连续，子串需要</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLIS</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        f = [<span class="number">0</span>] * <span class="built_in">len</span>(nums) <span class="comment"># 注意，是一个一维的，i表示坐标0-(n-1)，所以不需要+1，值表示长度</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">for</span> j, y <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums[:i]):  <span class="comment">#i取最后一个，j往前搜，都是一个东西，用一样的表示</span></span><br><span class="line">                <span class="keyword">if</span> x &gt; y: <span class="comment"># 最后这个数大一定是大于前面的</span></span><br><span class="line">                    f[i] = <span class="built_in">max</span>(f[i], f[j])  <span class="comment"># 因为是i和前面的比，所以不是i - 1</span></span><br><span class="line">            f[i] += <span class="number">1</span>  <span class="comment"># 加入最后这个。继承了之前的最大，在之后再次+1，所以不断找最大</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(f)  <span class="comment"># ！！不一定是最后一个最大</span></span><br></pre></td></tr></table></figure><h3 id="78-乘积最大子数组"><a href="#78-乘积最大子数组" class="headerlink" title="78. 乘积最大子数组"></a>78. 乘积最大子数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProduct</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        f_min = [<span class="number">0</span>] * n  <span class="comment"># 一共n个数，n个就可以</span></span><br><span class="line">        f_max = [<span class="number">0</span>] * n  <span class="comment"># 由于负号的存在，同时统计最大最小值</span></span><br><span class="line">        f_min[<span class="number">0</span>] = f_max[<span class="number">0</span>] = nums[<span class="number">0</span>]  <span class="comment"># 记得初始化</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):  <span class="comment"># 0已经给出来了，从1开始就可以</span></span><br><span class="line">            x = nums[i]  <span class="comment"># 提前取一个</span></span><br><span class="line">            f_min[i] = <span class="built_in">min</span>(f_max[i - <span class="number">1</span>] * x, f_min[i - <span class="number">1</span>] * x, x) <span class="comment"># 三个比大小哦，最大、最小*x和x</span></span><br><span class="line">            f_max[i] = <span class="built_in">max</span>(f_max[i - <span class="number">1</span>] * x, f_min[i - <span class="number">1</span>] * x, x)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(f_max)</span><br></pre></td></tr></table></figure><h3 id="79-分割等和子集"><a href="#79-分割等和子集" class="headerlink" title="79. 分割等和子集"></a>79. 分割等和子集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canPartition</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        s = <span class="built_in">sum</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> s % <span class="number">2</span>: <span class="comment"># s是奇数，那不能等分</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        s //= <span class="number">2</span>  <span class="comment"># 注意这里把 s 减半了</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        f = [[<span class="literal">False</span>] * (s + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]  <span class="comment"># 判断能不能成，是基于上一个，所以+1</span></span><br><span class="line">                                                    <span class="comment"># 能否从 nums[0] 到 nums[i] 中选出一个和恰好等于 j 的子序列。</span></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span>  <span class="comment"># 必须，基于此</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):  <span class="comment"># i从0开始，所以i + 1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(s + <span class="number">1</span>):  <span class="comment"># s+1是因为//可能掉了1</span></span><br><span class="line">                f[i + <span class="number">1</span>][j] = j &gt;= x <span class="keyword">and</span> f[i][j - x] <span class="keyword">or</span> f[i][j] <span class="comment"># 因为这里只可以选一次，所以都是i</span></span><br><span class="line">                <span class="comment">#第一个是判断还有x的容量，然后就减去x or 不要x</span></span><br><span class="line">        <span class="keyword">return</span> f[n][s]</span><br></pre></td></tr></table></figure><h2 id="多维动态规划"><a href="#多维动态规划" class="headerlink" title="多维动态规划"></a>多维动态规划</h2><h3 id="80-不同路径"><a href="#80-不同路径" class="headerlink" title="80. 不同路径"></a>80. 不同路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniquePaths</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        f = [[<span class="number">1</span>] * n] + [[<span class="number">1</span>] + [<span class="number">0</span>] * (n - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m - <span class="number">1</span>)] <span class="comment"># 1. 首行首列为1</span></span><br><span class="line">                                                                    <span class="comment"># 2. 注意第一块儿和第二块都有俩层[[]]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):  <span class="comment"># 下面-1, 这里从1开始</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j] + f[i][j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> f[m - <span class="number">1</span>][n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="81-最小路径和"><a href="#81-最小路径和" class="headerlink" title="81. 最小路径和"></a>81. 最小路径和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minPathSum</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">0</span>: <span class="keyword">continue</span>  <span class="comment"># 为了美观，循环自动j + 1</span></span><br><span class="line">                <span class="keyword">elif</span> i == <span class="number">0</span>: grid[i][j] += grid[i][j - <span class="number">1</span>] <span class="comment"># i固定不变，所以j - 1</span></span><br><span class="line">                <span class="keyword">elif</span> j == <span class="number">0</span>: grid[i][j] += grid[i - <span class="number">1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>: grid[i][j] += <span class="built_in">min</span>(grid[i][j - <span class="number">1</span>], grid[i - <span class="number">1</span>][j]) <span class="comment"># 要的是小的那个</span></span><br><span class="line">        <span class="keyword">return</span> grid[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="82-最长回文子串"><a href="#82-最长回文子串" class="headerlink" title="82. 最长回文子串"></a>82. 最长回文子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment"># dp是i到j是否是回文</span></span><br><span class="line">        ans = <span class="number">1</span>  <span class="comment"># ！！最小肯定为1</span></span><br><span class="line">        idx1 = idx2 = <span class="number">0</span>  <span class="comment"># 结果的左右下标记</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># ！！后往前，确保j走的都是i走过的</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):  <span class="comment"># 把i走过的判断是否是回文</span></span><br><span class="line">                dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] <span class="keyword">and</span> s[i] == s[j] <span class="keyword">if</span> j - i &gt;= <span class="number">2</span> <span class="keyword">else</span> s[i] == s[j]  <span class="comment"># 俩个以内判断是否相等；俩个以外，判断中间是以及外面相等</span></span><br><span class="line">                <span class="keyword">if</span> dp[i][j] <span class="keyword">and</span> j - i + <span class="number">1</span> &gt; ans:  <span class="comment"># 是回文，保存最大的ans</span></span><br><span class="line">                    ans = j - i + <span class="number">1</span></span><br><span class="line">                    idx1, idx2 = i, j</span><br><span class="line">        <span class="keyword">return</span> s[idx1 : idx2 + <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="83-最长公共子序列"><a href="#83-最长公共子序列" class="headerlink" title="83. 最长公共子序列"></a>83. 最长公共子序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestCommonSubsequence</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n, m = <span class="built_in">len</span>(s), <span class="built_in">len</span>(t)</span><br><span class="line">        f = [[<span class="number">0</span>] * (m + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]  <span class="comment"># 给定有值的使用enumerate，所以+1</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="keyword">for</span> j, y <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">                f[i + <span class="number">1</span>][j + <span class="number">1</span>] = f[i][j] + <span class="number">1</span> <span class="keyword">if</span> x == y <span class="keyword">else</span> <span class="built_in">max</span>(f[i][j + <span class="number">1</span>], f[i + <span class="number">1</span>][j])</span><br><span class="line">                <span class="comment"># 相等一起减一，否则i-1或者j-1</span></span><br><span class="line">        <span class="keyword">return</span> f[n][m]</span><br></pre></td></tr></table></figure><h3 id="84-编辑距离"><a href="#84-编辑距离" class="headerlink" title="84. 编辑距离"></a>84. 编辑距离</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minDistance</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(t)</span><br><span class="line">        f = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">        f[<span class="number">0</span>] = <span class="built_in">list</span>(<span class="built_in">range</span>(n + <span class="number">1</span>))  <span class="comment">#这个和第一个n是一样的！！</span></span><br><span class="line">                                   <span class="comment"># 因为取min，前面肯定有一个初始化，最大的情况</span></span><br><span class="line">                                   <span class="comment"># 1到m，假设每一步都需要改变</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            f[i + <span class="number">1</span>][<span class="number">0</span>] = i + <span class="number">1</span>  <span class="comment"># 注意是i从0-n，所以是i+1：第一列，假设每一步都需要改变</span></span><br><span class="line">            <span class="keyword">for</span> j, y <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">                f[i + <span class="number">1</span>][j + <span class="number">1</span>] = f[i][j] <span class="keyword">if</span> x == y <span class="keyword">else</span> <span class="built_in">min</span>(f[i][j + <span class="number">1</span>], f[i + <span class="number">1</span>][j], f[i][j]) + <span class="number">1</span></span><br><span class="line">                <span class="comment"># 相等不用变，单独处理</span></span><br><span class="line">                <span class="comment"># 删除、插入、替换都要做一次操作+1</span></span><br><span class="line">        <span class="keyword">return</span> f[n][m]</span><br></pre></td></tr></table></figure><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="85-只出现一次的数字"><a href="#85-只出现一次的数字" class="headerlink" title="85. 只出现一次的数字"></a>85. 只出现一次的数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            x ^= num</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="86-多数元素"><a href="#86-多数元素" class="headerlink" title="86. 多数元素"></a>86. 多数元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="comment"># from collections import List</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">majorityElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        counters = collections.Counter(nums)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(counters.keys(), key=counters.get)</span><br><span class="line">                        <span class="comment"># 前面是keys()， 后面是key</span></span><br><span class="line">                        <span class="comment"># get是在counters中的值(即出现的次数)</span></span><br></pre></td></tr></table></figure><h3 id="87-颜色分类"><a href="#87-颜色分类" class="headerlink" title="87. 颜色分类"></a>87. 颜色分类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortColors</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">nums, idx1, idx2</span>):</span><br><span class="line">            nums[idx1], nums[idx2] = nums[idx2], nums[idx1]</span><br><span class="line"></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>: <span class="keyword">return</span>  <span class="comment"># 小于2就不需要比较了</span></span><br><span class="line"></span><br><span class="line">        left, i, right = <span class="number">0</span>, <span class="number">0</span>, n  <span class="comment"># n是这样</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; right:  <span class="comment"># 注意&lt; + 注意是i，i和right临近啊</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">                swap(nums, left, i)</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i] == <span class="number">1</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right -= <span class="number">1</span>  <span class="comment"># right在swap前面</span></span><br><span class="line">                swap(nums, right, i)</span><br></pre></td></tr></table></figure><h3 id="88-下一个排列"><a href="#88-下一个排列" class="headerlink" title="88. 下一个排列"></a>88. 下一个排列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记住就要，一个数学方法的模拟</span></span><br><span class="line"><span class="comment"># 1. 倒序遍历数组中的元素，找到第一个相邻的升序序列 (i,j)；</span></span><br><span class="line"><span class="comment"># 2. 再倒序遍历，找到第一个大于 nums[i] 的元素，并将其与 nums[i] 交换位置；</span></span><br><span class="line"><span class="comment"># 3. 再将nums[j]及其后面的元素重新按照升序排序。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextPermutation</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        i = n - <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[i + <span class="number">1</span>]:  <span class="comment"># 找到第一个升序的i：&gt;=</span></span><br><span class="line">            i -= <span class="number">1</span>  <span class="comment"># 注意：是-=</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span>:  <span class="comment"># 存在i</span></span><br><span class="line">            j = n - <span class="number">1</span>  <span class="comment"># 重新从最后搜寻第一个大于i的j</span></span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[j]:  <span class="comment"># 这个和上面的一样，左边都是nums[i]。</span></span><br><span class="line">                                                  <span class="comment"># 非&lt;的就-1，所以&gt;=</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line"></span><br><span class="line">        left, right = i + <span class="number">1</span>, n - <span class="number">1</span>  <span class="comment"># 把i之后的换序</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="89-寻找重复数"><a href="#89-寻找重复数" class="headerlink" title="89. 寻找重复数"></a>89. 寻找重复数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完美的解法</span></span><br><span class="line"><span class="comment">#         0, 1, 2, 3, 4  # 环的值</span></span><br><span class="line"><span class="comment"># nums = [1, 3, 4, 2, 2] # 环的next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findDuplicate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        slow, fast = <span class="number">0</span>, <span class="number">0</span>  <span class="comment"># 初始化，停在0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># True，break跑掉</span></span><br><span class="line">            slow = nums[slow]  <span class="comment"># next：slow在[]中</span></span><br><span class="line">            fast = nums[nums[fast]]</span><br><span class="line">            <span class="keyword">if</span> slow == fast:  <span class="comment"># 第一次相遇在环里</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        fast = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># True，return跑掉</span></span><br><span class="line">            slow = nums[slow]</span><br><span class="line">            fast = nums[fast]</span><br><span class="line">            <span class="keyword">if</span> slow == fast:  <span class="comment"># 第二次相遇在交点</span></span><br><span class="line">                <span class="keyword">return</span> slow  <span class="comment"># 因为一定存在</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> hot100 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
